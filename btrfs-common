#!/bin/sh

ROOT="/btrfs-snapshots"

function setup() {
	mkdir -p "$ROOT"/"$(hostname)"
	ln -s "$(hostname)" "$ROOT/LOCAL"
}

function dir_to_subvolume() {
	# You can't use this on /.
	# You don't need to, either.
	dirname="$1"
	mv "$dirname"{,-tmp}
	btrfs subvolume create "$dirname"
	mv /"$d"-tmp/{,.}* /"$d" || true # We'll catch errors when we try to remove, anyway
	rmdir /"$d"-tmp
}

function setup_dir() {
	dirname="$1"
	encoded="$(encode "$dirname")"
	mkdir "$ROOT"/LOCAL/$encoded"
}

function all_hosts() {
	(
		cd "$ROOT";
		for hostroot in *; do
			if [ -d "$hostroot" ]; then
				echo "$hostroot"
			fi
		done
	)
}

function default_push_hosts() {
	if [ -e "$ROOT"/default_push_hosts ]; then
		cat "$ROOT"/default_push_hosts
	fi
}

function dirs_on_host() {
	host="$1"
	(
		cd "$ROOT/$host"
		for dir in *; do
			echo "$dir"
		done
	)
}
		
function cleanup_all() {
	all_hosts | while read host; do
		dirs_on_host "$host" | while read dir; do
			cleanup_dir "$ROOT/$host/$dir"
		done
	done
}

function cleanup_dir() {
	btrfs-cleanup-candidates $1 | while read DIRNAME; do
		# TODO check it's not the latest for some host.
		# We need to keep those!
		echo "DELETING $DIRNAME"
		btrfs subvolume delete "$DIRNAME"
	done
}

function push_all() {
	dirs_on_host LOCAL | while read encoded; do
		snap "$(decode "$encoded")"
		send_dir "$encoded"
	done
}

function decode() {
	echo "$1" | tr _ /
}

function encode() {
	echo "$1" | tr / _
}

function snap() {
	dirname="$1"
	encoded="$(encode "$dirname")"
	snaproot="$ROOT/LOCAL/$encoded"
	snapname="$snaproot"/"$(date +%Y%m%d-%H%M%S)"
	btrfs subvolume snapshot -r "$dirname" "$snapname"
}

function latest_snap() {
	ls "$ROOT/LOCAL/$1" | grep -v '^CURRENT' | tail -n 1
}

function hosts_for_snapdir() {
	(
		dirname="$1"
		cd "$dirname"
		for I in CURRENT-*; do
			echo "${I#*.}"
		done
	)
}

function send_dir() {
	encoded="$1"
	hosts_for_snapdir "$encoded" | while read host; do
		send_dir_host "$encoded" "$host"
	done
}

function send_dir_defaults() {
	encoded="$1"
	default_push_hosts | while read host; do
		send_dir_host "$encoding" "$host"
	done
}

function send_dir_host() {
	encoded="$1"
	host="$2"
	snapdir="$ROOT/LOCAL/$encoded"
	current="$(latest_snap "$encoded")"
	last_success_file="$snapdir/CURRENT-$host"
	if (
		if [ -e "$last_success_file" ]; then
			# Send a diff
			last_success="$(readlink "$snapdir/CURRENT-$host")"
			btrfs send -p "$snapdir/$last_success" "$snapdir/$current"
		else
			# Send a full snapshot
			btrfs send "$snapdir/$current"
		fi | SSH_AUTH_SOCK= ssh -i /root/.ssh/btrfs-send root@"$host" receive "$encoded"
	); then
		ln -fs "$t" "$snaproot/CURRENT-$host"
	fi
}
